unit MonolitoFinanceiro.Model.Usuarios;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Datasnap.Provider,
  Datasnap.DBClient, Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client,
  MonolitoFinanceiro.Model.Conexao,
  MonolitoFinanceiro.Model.Entidades.Usuarios;

type
  TdmUsuarios = class(TDataModule)
    fdqUsuarios: TFDQuery;
    cdsUsuarios: TClientDataSet;
    dspUsuarios: TDataSetProvider;
    cdsUsuariosid: TStringField;
    cdsUsuariosnome: TStringField;
    cdsUsuarioslogin: TStringField;
    cdsUsuariossenha: TStringField;
    cdsUsuariosstatus: TStringField;
    cdsUsuariosdata_cadastro: TDateField;
    procedure DataModuleCreate(Sender: TObject);
    procedure DataModuleDestroy(Sender: TObject);
  private
    FEntidadeUsuario : TModelEntidadeUsuario;
    FNomeUsuarioLogado: String;
    FLoginUsuarioLogado: String;
    FIDUsuarioLogado: String;
    function GetUsuarioLogado: TModelEntidadeUsuario;
    procedure SetNomeUsuarioLogado(const Value: String);
    procedure SetLoginUsuarioLogado(const Value: String);
    procedure SetIDUsuarioLogado(const Value: String);
  public
    { Public declarations }
    function TemLoginCadastrado(Login : String; ID : String): Boolean;
    procedure EfetuarLogin(Login : String; Senha: String);
    function GetUsuarioLogado : TModelEntidadeUsuario;
    {property NomeUsuarioLogado : String read FNomeUsuarioLogado write SetNomeUsuarioLogado;
        property LoginUsuarioLogado : String read FLoginUsuarioLogado write SetLoginUsuarioLogado;
            property IDUsuarioLogado : String read FIDUsuarioLogado write SetIDUsuarioLogado;}
  end;

var
  dmUsuarios: TdmUsuarios;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

{ TdmUsuarios }

procedure TdmUsuarios.DataModuleCreate(Sender: TObject);
begin
  FEntidadeUsuario := TModelEntidadeUsuario.Create;
end;

procedure TdmUsuarios.DataModuleDestroy(Sender: TObject);
begin
  FEntidadeUsuario.Free;
end;

procedure TdmUsuarios.EfetuarLogin(Login, Senha: String);
var
  SQLConsulta : TFDQuery;
begin
  SQLConsulta := TFDQuery.Create(nil);
  try
    SQLConsulta.Connection := DataModule1.FDConexao;
    SQLConsulta.SQL.Clear;
    SQLConsulta.SQL.Add('select * from usuarios where login = :login and senha = :senha');
    SQLConsulta.ParamByName('LOGIN').AsString := Login;
    SQLConsulta.ParamByName('SENHA').AsString := Senha;
    SQLConsulta.Open;

    if SQLConsulta.IsEmpty then
      raise Exception.Create('Usuário e/ou senha inválidos');
    if SQLConsulta.FieldByName('status').AsString <> 'A' then
      raise Exception.Create('Usuário bloqueado, favor entrar em contato com o administrador');

    FEntidadeUsuario.ID :=  SQLConsulta.FieldByName('ID').AsString;
    FEntidadeUsuario.Nome :=  SQLConsulta.FieldByName('NOME').AsString;
    FEntidadeUsuario.Login :=  SQLConsulta.FieldByName('LOGIN').AsString;
    {FIDUsuarioLogado := SQLConsulta.FieldByName('ID').AsString;
        FNomeUsuarioLogado := SQLConsulta.FieldByName('NOME').AsString;
            FLoginUsuarioLogado := SQLConsulta.FieldByName('LOGIN').AsString;}
  finally
    SQLConsulta.Close;
    SQLConsulta.Free;
  end;
end;

function TdmUsuarios.GetUsuarioLogado: TModelEntidadeUsuario;
begin
  Result := FEntidadeUsuario;
end;

{procedure TdmUsuarios.SetIDUsuarioLogado(const Value: String);
begin
  FIDUsuarioLogado := Value;
  end;

  procedure TdmUsuarios.SetLoginUsuarioLogado(const Value: String);
  begin
    FLoginUsuarioLogado := Value;
    end;

    procedure TdmUsuarios.SetNomeUsuarioLogado(const Value: String);
    begin
      FNomeUsuarioLogado := Value;
      end;}

function TdmUsuarios.TemLoginCadastrado(Login, ID: String): Boolean;
var
  SQLConsulta: TFDQuery;
begin
  Result := false;
  SQLConsulta := TFDQuery.Create(nil);
  try
    SQLConsulta.Connection := DataModule1.FDConexao;
    SQLConsulta.SQL.Clear;
    SQLConsulta.SQL.Add('select id from usuarios where login = :login');
    SQLConsulta.ParamByName('login').AsString := Login;
    SQLConsulta.Open;

    if not SQLConsulta.IsEmpty then
      Result := SQLConsulta.FieldByName('id').AsString <> ID;
  finally
    SQLConsulta.Close;
    SQLConsulta.Free;
  end;
end;

end.
